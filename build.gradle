plugins {
    id 'java'
    id 'maven-publish'
    //id 'pmd'
    id 'org.hidetake.ssh' version '2.11.2'
}

group = 'gg.mineral'
version = new Date().format('yyyyMMdd')

repositories {
    mavenCentral()
    maven {
        name "mineralDevPrivate"
        url "https://repo.mineral.gg/private"
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
            password = project.findProperty("gpr.token") ?: System.getenv("TOKEN")
        }
    }
    maven {
        url = 'https://repo.clojars.org/'
    }
}

dependencies {
    compileOnly "gg.mineral:nametag-api:20241126-14.08.47"
    compileOnly "gg.mineral.mineralspigot:mineralspigot-server:20241230-23.01.56"
    compileOnly 'gg.mineral:bot-api:20241204-03.39.21'
    compileOnly 'gg.mineral:database-api:20241117-09.57.02'
    compileOnly 'de.jeezycore:jeezy-core:20241117-09.57.15'
    compileOnly 'gg.mineral:bot-intelligence:20250122-22.48.44'
    compileOnly 'org.projectlombok:lombok:1.18.36'
    annotationProcessor 'org.projectlombok:lombok:1.18.36'
    compileOnly 'org.eclipse.jdt:org.eclipse.jdt.annotation:2.3.0'
    annotationProcessor 'org.eclipse.jdt:org.eclipse.jdt.annotation:2.3.0'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

jar {
    archiveFileName = 'MineralPractice.jar'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }.collect {
            it.filter { file ->
                !file.name.startsWith('META-INF')
            }
        }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

afterEvaluate { project ->
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifactId = project.name
                version = new Date().format("yyyyMMdd-HH.mm.ss")
            }
        }

        repositories {
            maven {
                url = uri("https://repo.mineral.gg/private")
                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                    password = project.findProperty("gpr.token") ?: System.getenv("TOKEN")
                }
            }
        }
    }
}

ssh.settings {
    knownHosts = allowAnyHosts // Allow connections to unknown hosts
}

remotes {
    deployServer {
        host = project.findProperty("deploy.ip") ?: System.getenv("DEPLOY_IP") // IP address
        port = project.findProperty("deploy.port")?.toInteger() ?: System.getenv("DEPLOY_PORT")?.toInteger() ?: 22 // Default to port 22
        user = project.findProperty("deploy.user") ?: System.getenv("DEPLOY_USER") // Username
        identity = file(System.getProperty('user.home') + '/.ssh/id_rsa') // Path to private key
    }
}

task deploy {
    dependsOn jar
    doLast {
        ssh.run {
            session(remotes.deployServer) {
                put from: "$buildDir/libs/MineralPractice.jar", into: project.findProperty("deploy.path") ?: System.getenv("DEPLOY_PATH")
            }
        }
    }
}

