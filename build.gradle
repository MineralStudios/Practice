plugins {
    id 'maven-publish'
    id 'com.gradleup.shadow' version '8.3.6'
    //id 'io.gitlab.arturbosch.detekt' version '1.23.7'
    id 'org.hidetake.ssh' version '2.11.2'
    id 'org.jetbrains.kotlin.jvm'
}

group = 'gg.mineral'
version = new Date().format('yyyyMMdd')

repositories {
    mavenCentral()
    maven {
        name "mineralDevPrivate"
        url "https://repo.mineral.gg/private"
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
            password = project.findProperty("gpr.token") ?: System.getenv("TOKEN")
        }
    }
    maven {
        url = 'https://repo.clojars.org/'
    }
    maven {
        url = 'https://repo.panda-lang.org/releases'
    }
    maven { url = uri("https://repo.codemc.io/repository/maven-releases/") }
    maven { url = uri("https://repo.codemc.io/repository/maven-snapshots/") }
    maven { url 'https://www.jitpack.io' }
    maven {
        name = 'lunarclient'
        url = 'https://repo.lunarclient.dev'
    }
}

dependencies {
    compileOnly "gg.mineral:nametag-api:20250423-23.24.51"
    compileOnly "me.caseload.knockbacksync:bukkit:20250501-13.36.34"
    compileOnly "gg.mineral.mineralspigot:mineralspigot-server:20250507-18.30.42"
    compileOnly "gg.mineral:bot-api:20250426-16.18.17"
    compileOnly "gg.mineral:database-api:20250507-20.49.40"
    compileOnly 'de.jeezycore:jeezy-core:20250506-07.55.36'
    compileOnly "gg.mineral:bot-intelligence:20250426-16.18.17"
    compileOnly 'com.github.retrooper:packetevents-spigot:2.7.0'
    compileOnly 'com.lunarclient:apollo-api:1.1.8'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "dev.rollczi:litecommands-bukkit:3.9.7"
    implementation 'com.google.code.gson:gson:2.13.1'
    implementation "com.squareup.okhttp3:okhttp:4.12.0"
}

/*detekt {
    config = files("detekt.yml") // Optional: Your custom configuration
    buildUponDefaultConfig = true
}*/

shadowJar {
    archiveFileName = 'MineralPractice.jar'
    from(sourceSets.main.resources.srcDirs) {
        into('/')
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveClassifier.set('')
    mergeServiceFiles()
}

tasks.build {
    dependsOn shadowJar
    tasks.jar.enabled = false
}

afterEvaluate { project ->
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifactId = project.name
                version = new Date().format("yyyyMMdd-HH.mm.ss")
            }
        }

        repositories {
            maven {
                url = uri("https://repo.mineral.gg/private")
                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                    password = project.findProperty("gpr.token") ?: System.getenv("TOKEN")
                }
            }
        }
    }
}

ssh.settings {
    knownHosts = allowAnyHosts // Allow connections to unknown hosts
}

kotlin {
    jvmToolchain(21)
}

remotes {
    deployServer {
        host = project.findProperty("deploy.ip") ?: System.getenv("DEPLOY_IP") // IP address
        port = project.findProperty("deploy.port")?.toInteger() ?: System.getenv("DEPLOY_PORT")?.toInteger() ?: 22
        // Default to port 22
        user = project.findProperty("deploy.user") ?: System.getenv("DEPLOY_USER") // Username
        identity = file(System.getProperty('user.home') + '/.ssh/id_rsa') // Path to private key
    }
}

task deploy {
    dependsOn shadowJar
    doLast {
        ssh.run {
            session(remotes.deployServer) {
                put from: "$buildDir/libs/MineralPractice.jar", into: project.findProperty("deploy.path") ?: System.getenv("DEPLOY_PATH")
            }
        }
    }
}

